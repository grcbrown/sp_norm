summarize(MeanRT = mean(rawRT), CI.Low = ci.low(rawRT), CI.High = ci.high(rawRT)) %>%
mutate(YMin = MeanRT - CI.Low, YMax = MeanRT + CI.High)
ggplot(agr, aes(x=NativeLanguage,y=MeanRT)) +
geom_bar(stat="identity",color="black",fill="gray60") +
geom_jitter(data=lexdec,aes(y=rawRT),alpha=.2,color="lightblue") +
geom_errorbar(aes(ymin=YMin,ymax=YMax),width=.25)
ggplot(lexdec, aes(NativeLanguage,y=rawRT,fill=NativeLanguage)) +
geom_violin() +
geom_point(data=means,aes(y=Mean))
means = lexdec %>%
group_by(NativeLanguage) %>%
summarize(Mean=mean(rawRT))
ggplot(lexdec, aes(NativeLanguage,y=rawRT,fill=NativeLanguage)) +
geom_violin() +
geom_point(data=means,aes(y=Mean))
ggplot(lexdec, aes(NativeLanguage,y=rawRT)) +
geom_boxplot()
lexdec$PredictedRT = fitted(m)
m = lmer(RT ~ Frequency*NativeLanguage + FamilySize + (1+Frequency+FamilySize|Subject) + (1+NativeLanguage|Word),data=lexdec)
lexdec$PredictedRT = fitted(m)
ggplot(lexdec, aes(x=PredictedRT,y=RT)) +
geom_point(size=.5) +
xlab("Model predicted log response times") +
ylab("Empirical log response times")
install.packages("brms")
install.packages("RcppEigen")
install.packages("brms", dependencies = TRUE, INSTALL_opts = '--no-lock')
install.packages("mice", dependencies = TRUE, INSTALL_opts = '--no-lock')
install.packages("mice", dependencies = TRUE, INSTALL_opts = '--no-lock')
install.packages("mice", dependencies = TRUE, INSTALL_opts = '--no-lock')
remove.packages("rstan")
if (file.exists(".RData")) file.remove(".RData")
install.packages("rstan")
install.packages("rstan")
install.packages("rstan")
library(brms)
install.packages("brms")
?install.packages
install.packages("brms", dependencies = TRUE)
install.packages("brms", dependencies = TRUE)
library(brm)
library(rstan)
library(rstantools)
install.packages("rstan")
install.packages("brms")
install.packages("RcppEigen")
install.packages("StanHeaders")
install.packages("brms")
install.packages("brms")
install.packages("Brobdingnag")
install.packages("Brobdingnag")
install.packages("Brobdingnag")
theme_set(theme_bw())
# Load the `languageR` and `brms` packages. If they're not yet installed you'll get an error saying "Error in library(languageR) : there is no package called ‘languageR’". To install the package, first type and execute `install.packages("languageR")`. (This generalizes to any package, using the name of the package instead of "languageR".)
library(languageR)
library(tidyverse)
theme_set(theme_bw())
# This will also load the lexical decision time dataset from Baayen et al (2006), which we will be modeling extensively. To see two different summaries of the dataset and the first few lines:
summary(lexdec)
str(lexdec)
head(lexdec)
View(lexdec)
# Load the `languageR` and `brms` packages. If they're not yet installed you'll get an error saying "Error in library(languageR) : there is no package called ‘languageR’". To install the package, first type and execute `install.packages("languageR")`. (This generalizes to any package, using the name of the package instead of "languageR".)
library(languageR)
library(tidyverse)
theme_set(theme_bw())
# This will also load the lexical decision time dataset from Baayen et al (2006), which we will be modeling extensively. To see two different summaries of the dataset and the first few lines:
summary(lexdec)
str(lexdec)
head(lexdec)
View(lexdec)
# To get information about the dataset provided by the authors:
?lexdec
# 1. How many data points are there?
# Hint: use the nrow() function.
nrow(lexdec)
# 2. How many unique participants are there?
# Hint: Use the length() and unique() functions.
length(unique(lexdec$Subject))
# Let's recode the language background variable from "NativeLanguage" to "LanguageBackground", and its levels from "English" & "Other" to "English" & "Non-English"
lexdec = lexdec %>%
rename("LanguageBackground"="NativeLanguage") %>%
mutate(LanguageBackground = fct_recode(LanguageBackground, "Non-English"="Other"))
# 4. How many data points are in the English and Non-English groups?
# Hint: Use the table() function.
table(lexdec$LanguageBackground)
contrasts(lexdec$LanguageBackground)
lexdec %>%
group_by(LanguageBackground) %>% summarize (Mean = mean(RT))
# Frequentist stats
# Let's run our first linear regression model! We start by asking whether language background has a linear effect on log RTs:
m.f = lm(RT ~ LanguageBackground, data=lexdec)
summary(m.f)
# Bayesian stats
# Let's run the exact same model the Bayesian way! We haven't specified a prior, so the model will assume flat default priors.
m.b = brm(RT ~ LanguageBackground, data=lexdec)
summary(m.b)
# To see the assumed priors:
prior_summary(m.b)
# To do hypothesis-testing: get the Bayes Factor for the effect of LanguageBackground being greater than 0. (Evid.Ratio shows the Bayes Factor.)
h <- hypothesis(m.b, "LanguageBackgroundNonMEnglish > 0")
source("~/Documents/STANFORD/WI_24/Methods/LINGUIST245B/code_sheets/1_linear_regression_withprompts.R")
# 5. Extend the simple model to include an additional predictor for frequency. If you don't remember the name of the frequency column in the dataset, use the names() function.
m.f = lm(RT ~ LanguageBackground + Frequency, data = lexdec)
summary(m.f)
# 6. Let's extend the model to include the interaction between frequency and language background. In order to interpret interaction terms, we need to know how predictors are coded. By default, R dummy-codes categorical predictors. It assigns 0 and 1 to the predictors in alphabetical order. If you're not sure how a predictor is coded (or if you want to change the default coding), you can use the contrasts() function. What is the reference level for the LanguageBackground predictor?
contrasts(lexdec$LanguageBackground)
# Frequentist:
m.f = lm(RT ~ Frequency + LanguageBackground + Frequency:LanguageBackground, data=lexdec)
summary(m.f)
# CENTER PREDICTORS
tmp = lexdec %>%
mutate(cFrequency = Frequency - mean(Frequency),
cLanguageBackground = as.numeric(as.factor(LanguageBackground)) - mean(as.numeric(as.factor(LanguageBackground))))
contrasts(tmp$LanguageBackground)
View(tmp)
m.f = lm(RT ~ cFrequency*cLanguageBackground, data=tmp)
summary(m.f)
library(languageR)
library(lme4)
library(MuMIn)
install.packages("MuMIn")
library(languageR)
library(tidyverse)
library(lme4)
library(MuMIn)
# Preliminaries: Let's recode the language background variable and then create a column with centered predictors.
lexdec = lexdec %>%
rename("LanguageBackground"="NativeLanguage") %>%
mutate(LanguageBackground = fct_recode(LanguageBackground, "Non-English"="Other"))
theme_set(theme_bw())
View(lexdec)
lexdec = lexdec %>%
mutate(cFrequency = Frequency - mean(Frequency),
cLanguageBackground = as.numeric(as.factor(LanguageBackground)) - mean(as.numeric(as.factor(LanguageBackground))))
# Preliminaries: Let's recode the language background variable and then create a column with centered predictors.
lexdec = lexdec %>%
rename("LanguageBackground"="NativeLanguage") %>%
mutate(LanguageBackground = fct_recode(LanguageBackground, "Non-English"="Other"))
lexdec = lexdec %>%
mutate(cFrequency = Frequency - mean(Frequency),
cLanguageBackground = as.numeric(as.factor(LanguageBackground)) - mean(as.numeric(as.factor(LanguageBackground))))
library(tidyverse)
library(lme4)
library(lmerTest)
library(ggplot2)
library(MuMIn)
setwd("/Users/gracebrown/qp1_spk/sp_norm")
# color-blind-friendly palette
cbPalette <- c("#E69F00", "#56B4E9", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7")
theme_set(theme_bw())
# LOAD DATA
data <- read.csv('./data/speaker_norming-merged.csv')
View(data)
View(data)
View(data)
# DATA SHAPING
## remove participants according to exclusion criteria
check_by_participant <- data %>% filter(trial_type == "audio-button-response") %>% group_by(participant_id) %>% filter(response != 2)
# DATA SHAPING
## remove participants according to exclusion criteria
check_by_participant <- data %>% filter(trial_type == "audio-button-response") %>% group_by(workerid) %>% filter(response != 2)
View(check_by_participant)
View(check_by_participant)
# DATA SHAPING
## remove participants according to exclusion criteria
exclude_full <- data %>% filter(trial_type == "audio-button-response") %>% group_by(workerid) %>% filter(response != 2)
# DATA SHAPING
## remove participants according to exclusion criteria
exclude <- data %>% filter(trial_type == "audio-button-response") %>% group_by(workerid) %>% filter(response != 2)
print(exclude$workerid)
data <- data[!(data$workerid %in% c(510 453 494 435 438 467 489)),]
data <- data[!(data$workerid %in% c(510, 453, 494, 435, 438, 467, 489)),]
View(data)
## criteria 2 - responded to 80% of trials or more
exclude2 <- data %>% filter(!is.na(response)) %>% filter(trial_type == "audio-slider-response") %>% group_by(workerid)
View(exclude2)
## criteria 2 - responded to 80% of trials or more
exclude2 <- data %>% filter(!is.na(response)) %>% filter(trial_type == "audio-slider-response") %>% group_by(workerid) %>% count(response)
View(exclude2)
## criteria 2 - responded to 80% of trials or more
exclude2 <- data %>% filter(!is.na(response)) %>% filter(trial_type == "audio-slider-response") %>% group_by(workerid) %>% count(workerid)
## criteria 2 - responded to 80% of trials or more
exclude2 <- data %>% filter(!is.na(response)) %>% filter(trial_type == "audio-slider-response") %>% group_by(workerid) #%>% count(workerid)
## criteria 2 - responded to 80% of trials or more
exclude2 <- data %>% filter(!is.na(response)) %>% filter(trial_type == "audio-slider-response") %>% group_by(workerid) %>% count(workerid)
## criteria 2 - responded to 80% of trials or more
exclude2 <- data %>% filter(!is.na(rt)) %>% filter(trial_type == "audio-slider-response") %>% group_by(workerid) %>% count(workerid)
exclude2 <- filter(exclude2$n < 4)
exclude2 <- exclude2 %>% filter(n < 4)
View(exclude2)
exclude2 <- exclude2 %>% filter(n < 5)
## criteria 2 - responded to 80% of trials or more
exclude_trial <- data %>% filter(!is.na(rt)) %>% filter(trial_type == "audio-slider-response") %>% group_by(workerid) %>% count(workerid)
exclude2 <- exclude_trial %>% filter(n < 5)
View(exclude2)
exclude2 <- exclude_trial %>% filter(n < 4)
exclude2 <- exclude_trial %>% filter(n < 4)
## separate numeric and string data
data$response_numeric <- ifelse(data$trial_type=="audio-slider-response", data$response, NA)
data$response_numeric <- as.double(data$response_numeric)
## unpack demographic data
data$response_survey <- ifelse(data$trial_type=="survey", data$response, NA)
survey_results <- data %>% filter(!is.na(response_survey) == TRUE) %>% group_by(workerid)
data$response_survey <- gsub("'", '"', data$response_survey)
demo <- data %>% filter(!is.na(response_survey))
json_data <- fromJSON(demo$response_survey)
library(rjson)
install.packages('rjson')
library(jsonlite)
json_data <- fromJSON(demo$response_survey)
View(survey_results)
library(stringr)
View(survey_results)
str_sub(survey_results$response, end = -2)
str_sub(survey_results$response, end = -2)
str_sub(survey_results$response, end = -5)
str_sub(survey_results$response, end = -10)
str_sub(survey_results$response, end = -19)
str_sub(survey_results$response, end = -21)
?string_replace
?str_replace
str_replace(survey_results$response, ", 'question1': None", "")
demo$response_survey <- str_replace(demo$response, ", 'question1': None", "")
json_data <- fromJSON(demo$response_survey)
class(demo$response_survey)
print(demo$response_survey[1])
valueOf(demo$response_survey[1])
valueOf(demo$response_survey[1])
demo$response_survey[1]
fromJSON(demo$response_survey[1])
X <- print(demo$response_survey[1])
fromJSON(X)
demo$response_survey <- str_replace(demo$response, "'", """)
fromJSON("{'age': '35', 'enjoy': 'Better than the average experiment', 'gender': 'Female', 'region': 'Southwest - AZ, NM, OK, TX', 'correct': 'Yes', 'payment': 'The payment was fair', 'comments': 'none, but thank you and good luck with your research', 'language': 'english', 'education': 'Graduated college'}")
fromJSON("'age': '35', 'enjoy': 'Better than the average experiment', 'gender': 'Female', 'region': 'Southwest - AZ, NM, OK, TX', 'correct': 'Yes', 'payment': 'The payment was fair', 'comments': 'none, but thank you and good luck with your research', 'language': 'english', 'education': 'Graduated college'")
fromJSON('"age": "35", "enjoy": "Better than the average experiment", "gender": "Female", "region": "Southwest - AZ, NM, OK, TX", "correct": "Yes", "payment": "The payment was fair", "comments": "none, but thank you and good luck with your research", "language": "english", "education": "Graduated college"')
## unpack demographic data
data$response_survey <- ifelse(data$trial_type=="survey", data$response, NA)
survey_results <- data %>% filter(!is.na(response_survey) == TRUE) %>% group_by(workerid)
View(survey_results)
data$response_survey <- gsub("'", '"', data$response_survey)
demo <- data %>% filter(!is.na(response_survey))
demo$response_survey <- str_replace(demo$response, ", 'question1': None", "")
json_data <- fromJSON(demo$response_survey)
## unpack demographic data
data$response_survey <- ifelse(data$trial_type=="survey", data$response, NA)
survey_results <- data %>% filter(!is.na(response_survey) == TRUE) %>% group_by(workerid)
#data$response_survey <- gsub("'", '"', data$response_survey)
demo <- data %>% filter(!is.na(response_survey))
demo$response_survey <- str_replace(demo$response, ", 'question1': None", "")
json_data <- fromJSON(demo$response_survey)
### summarize numeric data
exp_data <- data %>%
filter(!is.na(response)) %>%
group_by(workerid,coding) %>%
summarize(response_numeric)
View(exp_data)
### summarize numeric data
exp_data <- data %>%
filter(!is.na(response)) %>%
group_by(workerid,coding) %>%
summarize(response_numeric,score_link)
### summarize numeric data
exp_data <- data %>%
filter(!is.na(response)) %>%
group_by(workerid,coding) %>%
summarize(response_numeric)
View(exp_data)
### summarize numeric data
exp_data <- data %>%
filter(!is.na(response), !is.na(coding)) %>%
group_by(coding) %>%
summarize(response_numeric)
### summarize numeric data
exp_data <- data %>%
filter(!is.na(response)) %>%
group_by(coding) #%>%
exp_data <- filter(exp_data, is.na(response_numeric)==FALSE)
View(exp_data)
### summarize numeric data
exp_data <- data %>%
filter(!is.na(response)) %>%
group_by(coding) %>%
mean(response_numeric)
exp_data <- filter(exp_data, is.na(response_numeric)==FALSE)
summarize(exp_data$response_numeric)
### summarize numeric data
exp_data <- data %>%
filter(!is.na(response)) %>%
group_by(coding)
exp_data <- filter(exp_data, is.na(response_numeric)==FALSE)
summarize(exp_data$response_numeric)
mean(exp_data$response_numeric)
summarize(coding, response_numeric)
exp_data %>% summarize(coding, response_numeric)
View(exp_data)
data$response_political <- ifelse(data$trial_type == "survey-likert", data$response, NA)
## calculate SQR score and append it to main df
data$coding[data$coding == ""] <- NA
data$sqr <- ifelse(data$trial_type == "html-vas-response" & is.na(data$coding) == FALSE,
data$response_numeric, NA)
View(data)
data$sqr <- ifelse(data$trial_type == "html-slider-response" & is.na(data$coding) == FALSE,
data$response_numeric, NA)
data$gender_trans <- ifelse(data$trial_type == "html-slider-response" & is.na(data$coding) == FALSE & data$coding == "NEGATIVE",
(10000-data$sqr)/100, NA)
data$gender_link <- ifelse(data$trial_type == "html-slider-response" & is.na(data$coding) == FALSE & data$coding == "POSITIVE",
(data$sqr)/100, NA)
score_gender <- data %>% filter(!is.na(gender_link)) %>% group_by(participant_id) %>% summarize("score" = mean(gender_link+gender_trans))
View(data)
data$sqr <- ifelse(data$trial_type == "html-slider-response" & is.na(data$coding) == FALSE,
data$response_numeric, NA)
data$gender_trans <- ifelse(data$trial_type == "html-slider-response" & is.na(data$coding) == FALSE & data$coding == "NEGATIVE",
(10000-data$sqr)/100, NA)
data$gender_link <- ifelse(data$trial_type == "html-slider-response" & is.na(data$coding) == FALSE & data$coding == "POSITIVE",
(data$sqr)/100, NA)
## separate numeric and string data
data$response_numeric <- ifelse(data$trial_type=="audio-slider-response" | "html-slider-response", data$response, NA)
## separate numeric and string data
data$response_numeric <- ifelse(data$trial_type==("audio-slider-response" | "html-slider-response"), data$response, NA)
## separate numeric and string data
data$response_numeric <- ifelse(data$trial_type=="audio-slider-response" | data$trial_type=="html-slider-response"), data$response, NA)
## separate numeric and string data
data$response_numeric <- ifelse(data$trial_type=="audio-slider-response" | data$trial_type=="html-slider-response", data$response, NA)
data$response_numeric <- as.double(data$response_numeric)
## calculate SQR score and append it to main df
data$coding[data$coding == ""] <- NA
data$sqr <- ifelse(data$trial_type == "html-slider-response" & is.na(data$coding) == FALSE,
data$response_numeric, NA)
data$gender_trans <- ifelse(data$trial_type == "html-slider-response" & is.na(data$coding) == FALSE & data$coding == "NEGATIVE",
(10000-data$sqr)/100, NA)
data$gender_link <- ifelse(data$trial_type == "html-slider-response" & is.na(data$coding) == FALSE & data$coding == "POSITIVE",
(data$sqr)/100, NA)
score_gender_link <- data %>% filter(!is.na(gender_link)) %>% group_by(workerid) %>% summarize("score_link" = mean(gender_link))
data <- merge(data, score_gender_link, by = "workerid", all.x = TRUE)
score_gender_trans <- data %>% filter(!is.na(gender_trans)) %>% group_by(participant_id) %>% summarize("score_trans" = mean(gender_trans))
data <- merge(data, score_gender_trans, by = "workerid", all.x = TRUE)
score_gender_trans <- data %>% filter(!is.na(gender_trans)) %>% group_by(workerid) %>% summarize("score_trans" = mean(gender_trans))
data <- merge(data, score_gender_trans, by = "workerid", all.x = TRUE)
srq_score <- data %>% group_by(workerid) %>% summarize("score" = mean(score_gender_trans+score_gender_link))
View(score_gender_link)
View(score_gender_trans)
View(score_gender_link)
View(score_gender_trans)
View(score_gender_link)
View(score_gender_trans)
View(srq_score)
srq_score <- data %>% group_by(workerid) %>% summarize("score" = (score_gender_trans+score_gender_link)/2)
View(srq_score)
srq_score <- data %>% group_by(workerid) %>% summarize("score" = (score_gender_trans+score_gender_link)/2)
View(srq_score)
score_gender_link <- data %>% filter(!is.na(gender_link)) %>% group_by(workerid) %>% summarize("score_link" = mean(gender_link))
data <- merge(data, score_gender_link, by = "workerid", all.x = TRUE)
View(score_gender_link)
score_gender_trans <- data %>% filter(!is.na(gender_trans)) %>% group_by(workerid) %>% summarize("score_trans" = mean(gender_trans))
data <- merge(data, score_gender_trans, by = "workerid", all.x = TRUE)
View(data)
# LOAD DATA
data <- read.csv('./data/speaker_norming-merged.csv')
# DATA SHAPING
## remove participants according to exclusion criteria
## criteria 1 - failed audio check
exclude_audio <- data %>% filter(trial_type == "audio-button-response") %>% group_by(workerid) %>% filter(response != 2)
print(exclude_audio$workerid)
data <- data[!(data$workerid %in% c(510, 453, 494, 435, 438, 467, 489)),]
## criteria 2 - responded to less than 80% of trials
exclude_trial <- data %>% filter(!is.na(rt)) %>% filter(trial_type == "audio-slider-response") %>% group_by(workerid) %>% count(workerid)
exclude2 <- exclude_trial %>% filter(n < 4)
## separate numeric and string data
data$response_numeric <- ifelse(data$trial_type=="audio-slider-response" | data$trial_type=="html-slider-response", data$response, NA)
data$response_numeric <- as.double(data$response_numeric)
## unpack demographic data
data$response_survey <- ifelse(data$trial_type=="survey", data$response, NA)
survey_results <- data %>% filter(!is.na(response_survey) == TRUE) %>% group_by(workerid)
data$response_survey <- gsub("'", '"', data$response_survey)
demo <- data %>% filter(!is.na(response_survey))
demo$response_survey <- str_replace(demo$response, ", 'question1': None", "")
data$response_political <- ifelse(data$trial_type == "survey-likert", data$response, NA)
## calculate SQR score and append it to main df
data$coding[data$coding == ""] <- NA
data$sqr <- ifelse(data$trial_type == "html-slider-response" & is.na(data$coding) == FALSE,
data$response_numeric, NA)
data$gender_trans <- ifelse(data$trial_type == "html-slider-response" & is.na(data$coding) == FALSE & data$coding == "NEGATIVE",
(10000-data$sqr)/100, NA)
data$gender_link <- ifelse(data$trial_type == "html-slider-response" & is.na(data$coding) == FALSE & data$coding == "POSITIVE",
(data$sqr)/100, NA)
data$sqr <- ifelse(data$trial_type == "html-slider-response" & is.na(data$coding) == FALSE,
data$response_numeric/10000, NA)
data$sqr <- ifelse(data$trial_type == "html-slider-response" & is.na(data$coding) == FALSE,
data$response_numeric*10000, NA)
data$sqr <- ifelse(data$trial_type == "html-slider-response" & is.na(data$coding) == FALSE,
data$response_numeric/100, NA)
data$sqr_raw <- ifelse(data$trial_type == "html-slider-response" & is.na(data$coding) == FALSE,
data$response_numeric/100, NA)
### summarize numeric data
exp_data <- data %>%
filter(!is.na(response)) %>%
group_by(coding)
exp_data <- filter(exp_data, is.na(response_numeric)==FALSE)
exp_data %>% summarize(coding, response_numeric)
#### by expected + triplet_id
exp_sub_1 <- subset(exp_data, select = -c(workerid))
View(exp_sub_1)
exp_summary_1 <- summarize(exp_sub_1, "mean"=mean(response_numeric/100), "var" = var(response_numeric/100))
View(exp_summary_1)
### summarize numeric data
exp_data <- data %>%
filter(!is.na(response)) %>%
group_by(coding) %>% filter(coding == 193 | coding == 246 | coding == 340 | coding == 625 | coding == 723)
View(exp_data)
exp_data <- filter(exp_data, is.na(response_numeric)==FALSE)
exp_data %>% summarize(coding, response_numeric)
#### by expected + triplet_id
exp_sub_1 <- subset(exp_data, select = -c(workerid))
exp_summary_1 <- summarize(exp_sub_1, "mean"=mean(response_numeric/100), "var" = var(response_numeric/100))
print(exp_summary_1)
exp_summary_1 <- summarize(exp_sub_1, "mean"=mean(response_numeric), "var" = var(response_numeric))
print(exp_summary_1)
### rescale response data
exp_data$response_numeric <- exp_data$response_numeric/100
exp_data <- filter(exp_data, is.na(response_numeric)==FALSE)
exp_data %>% summarize(coding, response_numeric)
#### by expected + triplet_id
exp_sub_1 <- subset(exp_data, select = -c(workerid))
exp_summary_1 <- summarize(exp_sub_1, "mean"=mean(response_numeric), "var" = var(response_numeric))
print(exp_summary_1)
#### by expected + participant
exp_sub_2 <- exp_data
exp_summary_2 <- summarize(exp_sub_2, "mean"=mean(response_numeric), "var" = var(response_numeric))
print(exp_summary_2)
# VISUALIZATIONS
## overall distribution of ratings
hist_by_spk <- ggplot(exp_data,aes(x=response_numeric, fill = coding))+
geom_histogram(bins=30)+
facet_grid(.~coding) +
xlab("Masculinity Rating") +
scale_fill_manual(values = cbPalette)
print(hist_by_spk)
exclude2 <- exclude_trial %>% filter(n < 5)
exclude2 <- exclude_trial %>% filter(n < 4)
print(exclude2$workerid)
data <- data[!(data$workerid) %in% c(449, 473, 478, 505, 512, 533, 545)]
data <- data[!(data$workerid) %in% c(449, 473, 478, 505, 512, 533, 545)),]
data <- data[!(data$workerid %in% c(449, 473, 478, 505, 512, 533, 545)),]
count(data$workerid)
n_distinct(data$workerid)
## separate numeric and string data
data$response_numeric <- ifelse(data$trial_type=="audio-slider-response" | data$trial_type=="html-slider-response", data$response, NA)
data$response_numeric <- as.double(data$response_numeric)
## unpack demographic data
data$response_survey <- ifelse(data$trial_type=="survey", data$response, NA)
survey_results <- data %>% filter(!is.na(response_survey) == TRUE) %>% group_by(workerid)
data$response_survey <- gsub("'", '"', data$response_survey)
demo <- data %>% filter(!is.na(response_survey))
demo$response_survey <- str_replace(demo$response, ", 'question1': None", "")
data$response_political <- ifelse(data$trial_type == "survey-likert", data$response, NA)
## calculate SQR score and append it to main df
data$coding[data$coding == ""] <- NA
data$sqr_raw <- ifelse(data$trial_type == "html-slider-response" & is.na(data$coding) == FALSE,
data$response_numeric/100, NA)
data$gender_trans <- ifelse(data$trial_type == "html-slider-response" & is.na(data$coding) == FALSE & data$coding == "NEGATIVE",
(10000-data$sqr)/100, NA)
data$gender_link <- ifelse(data$trial_type == "html-slider-response" & is.na(data$coding) == FALSE & data$coding == "POSITIVE",
(data$sqr)/100, NA)
score_gender_link <- data %>% filter(!is.na(gender_link)) %>% group_by(workerid) %>% summarize("score_link" = mean(gender_link))
data <- merge(data, score_gender_link, by = "workerid", all.x = TRUE)
score_gender_trans <- data %>% filter(!is.na(gender_trans)) %>% group_by(workerid) %>% summarize("score_trans" = mean(gender_trans))
data <- merge(data, score_gender_trans, by = "workerid", all.x = TRUE)
srq_score <- data %>% group_by(workerid) %>% summarize("score" = (score_gender_trans+score_gender_link)/2)
### summarize numeric data
exp_data <- data %>%
filter(!is.na(response)) %>%
group_by(coding) %>%
filter(coding == 193 | coding == 246 | coding == 340 | coding == 625 | coding == 723)
### rescale response data
exp_data$response_numeric <- exp_data$response_numeric/100
exp_data <- filter(exp_data, is.na(response_numeric)==FALSE)
exp_data %>% summarize(coding, response_numeric)
#### mean + variance
exp_sub_1 <- subset(exp_data, select = -c(workerid))
exp_summary_1 <- summarize(exp_sub_1, "mean"=mean(response_numeric), "var" = var(response_numeric))
print(exp_summary_1)
# VISUALIZATIONS
## overall distribution of ratings
hist_by_spk <- ggplot(exp_data,aes(x=response_numeric, fill = coding))+
geom_histogram(bins=30)+
facet_grid(.~coding) +
xlab("Masculinity Rating") +
scale_fill_manual(values = cbPalette)
print(hist_by_spk)
ggsave(file="./analysis/main_masc_lex/Graphs/hist_by_condition.pdf",width=7,height=4)
ggsave(file="./analysis/main/Graphs/hist_summary.pdf",width=7,height=4)
# VISUALIZATIONS
## overall distribution of ratings
hist_by_spk <- ggplot(exp_data,aes(x=response_numeric, fill = coding))+
geom_histogram(bins=30)+
facet_grid(.~coding) +
xlab("Masculinity Rating") +
scale_fill_manual(values = cbPalette, name = "Speaker ID")
print(hist_by_spk)
ggsave(file="./analysis/main/Graphs/hist_summary.pdf",width=7,height=4)
ggsave(file="./analysis/main/Graphs/hist_summary.png",width=,height=4)
print(hist_all)
# VISUALIZATIONS
## gen distribution of ratings
hist_all <- ggplot(exp_data, aes(x=response_numeric)) +
geom_histogram(bins=30) +
xlab("Masculinity Rating") +
scale_fill_manual(values = cbPalette) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())
print(hist_all)
